name: Terraform Deploy

on:
  push:
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform.yml'
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write    # Grant OIDC permissions for Azure Login
  contents: read     # Grant access to repository content

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Import Existing Azure Resources
        working-directory: ./terraform
        run: |
          echo "Fetching resources in resource group: fc-transformer-rg"
          
          # Fetch all resources in the resource group
          RESOURCES=$(az resource list --resource-group fc-transformer-rg --query "[].{id:id, type:type}" -o json)

          # Map Azure resource types to valid Terraform types
          echo "$RESOURCES" | jq -c '.[]' | while read resource; do
            RESOURCE_ID=$(echo "$resource" | jq -r '.id')
            RESOURCE_TYPE=$(echo "$resource" | jq -r '.type')

            case "$RESOURCE_TYPE" in
              "Microsoft.Storage/storageAccounts")
                TERRAFORM_TYPE="azurerm_storage_account"
                ;;
              "Microsoft.DBforPostgreSQL/servers")
                TERRAFORM_TYPE="azurerm_postgresql_server"
                ;;
              "Microsoft.Web/serverfarms")
                TERRAFORM_TYPE="azurerm_service_plan"
                ;;
              "Microsoft.Web/sites")
                TERRAFORM_TYPE="azurerm_linux_function_app"
                ;;
              *)
                echo "Skipping unsupported resource type: $RESOURCE_TYPE"
                continue
                ;;
            esac

            # Construct Terraform import command
            echo "Importing resource: $RESOURCE_ID (type: $TERRAFORM_TYPE)"
            terraform import "${TERRAFORM_TYPE}.main" "$RESOURCE_ID" || echo "Failed to import $RESOURCE_ID"
          done

      - name: Plan Terraform
        working-directory: ./terraform
        run: |
          terraform plan -out=plan.out \
            -var="AZURE_SQL_ADMIN=${{ secrets.AZURE_SQL_ADMIN }}" \
            -var="AZURE_SQL_PASSWORD=${{ secrets.AZURE_SQL_PASSWORD }}"\
            -var="RUNWAYML_API_KEY=${{ secrets.RUNWAYML_API_KEY }}"\
            -var="YOUTUBE_CLIENT_ID=${{ secrets.YOUTUBE_CLIENT_ID }}"\
            -var="YOUTUBE_CLIENT_SECRET=${{ secrets.YOUTUBE_CLIENT_SECRET }}"\
            -var="YOUTUBE_REFRESH_TOKEN=${{ secrets.YOUTUBE_REFRESH_TOKEN }}"\
            -var="AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"\
            -var="ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}"\
            -var="AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"\
            -var="AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}"
            
      - name: Save Terraform Plan
        uses: actions/upload-artifact@v3  # Missing "uses" keyword added here
        with:
          name: terraform-plan
          path: ./terraform/plan.out      # Ensure the correct path for the saved artifact

      - name: Apply Terraform
        working-directory: ./terraform
        if: github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve plan.out